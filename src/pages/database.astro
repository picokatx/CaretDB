---
import Head from '../components/Head.astro';
import "../styles/app.css";
import AgGridAstro from '../components/AgGridAstro.astro';
// Import GridOptions and ColDef for typing
import type { ColDef } from 'ag-grid-enterprise';

const commandItems = [
    { name: 'SQL Query', code: 'taiga.command.sql_query' },
    { name: 'Search Text', code: 'taiga.command.search_text' }
];

// Dummy Data for Testing
const testRowData = [
  { make: "Tesla", model: "Model Y", price: 64950, electric: true, month: "June" },
  { make: "Ford", model: "F-Series", price: 33850, electric: false, month: "October" },
  { make: "Toyota", model: "Corolla", price: 29600, electric: false, month: "August" },
  { make: "Mercedes", model: "EQS", price: 150000, electric: true, month: "March" },
  { make: "BMW", model: "i4", price: 55000, electric: true, month: "July" }
];

const testColDefs: ColDef[] = [
  { field: "make", checkboxSelection: true, filter: true, floatingFilter: true },
  { field: "model", filter: 'agTextColumnFilter' },
  { field: "price", filter: 'agNumberColumnFilter' },
  { field: "electric" },
  { field: "month", comparator: (valueA, valueB) => {
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      return months.indexOf(valueA) - months.indexOf(valueB);
    }
  }
];

// We configure grid options mostly in AgGridAstro now, especially rowModelType
// We pass initial colDefs here, though AgGridAstro's runQuery will likely override them

---

<html lang="en" data-theme="cupcake">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <Head title="Database View" />
    {/* IMPORTANT: Ensure AG Grid CSS is linked globally */}
    {/* Example linking - adjust path as needed */}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css"/>
    <style>
      body {
        min-height: 100vh;
      }
      main {
        padding: 1rem;
      }
      .table-compact th, .table-compact td {
         font-size: 0.8rem; /* Adjust size for compact tables */
         padding: 0.3rem 0.5rem;
      }
    </style>
    {/* Global styles to map DaisyUI variables to AG Grid Alpine theme */}
    <style is:global>
      .ag-theme-alpine {
        /* General */
         --ag-background-color: var(--b1) !important;
         --ag-foreground-color: var(--bc) !important;
         --ag-border-color: var(--b3) !important;
         --ag-secondary-border-color: var(--b2) !important;
         --ag-invalid-color: var(--er, red) !important;
         --ag-icon-color: var(--bc) !important;

        /* Header */
         --ag-header-background-color: var(--b2) !important; 
         --ag-header-foreground-color: var(--bc) !important;
         --ag-header-cell-hover-background-color: var(--b3) !important;
         --ag-header-cell-moving-background-color: var(--n) !important;

        /* Rows */
         --ag-odd-row-background-color: var(--b1) !important;
         --ag-row-hover-color: var(--b2) !important;
         --ag-selected-row-background-color: hsla(var(--p)/.3) !important; /* Use primary with opacity */

        /* Inputs & Controls */
         --ag-input-background-color: var(--b1) !important;
         --ag-input-border-color: var(--b3) !important;
         --ag-input-disabled-background-color: var(--b2) !important;
         --ag-input-focus-border-color: var(--p) !important;
         --ag-input-disabled-border-color: var(--b2) !important;
         --ag-checkbox-background-color: var(--b1) !important;
         --ag-checkbox-checked-color: var(--p) !important;
         --ag-alpine-active-color: var(--p) !important; /* Used for checkbox background when checked, range selection */

        /* Tooltips */
         --ag-tooltip-background-color: var(--n) !important;
         --ag-tooltip-foreground-color: var(--nc) !important;

        /* Range Selection */
         --ag-range-selection-border-color: var(--p) !important;
         --ag-range-selection-background-color: hsla(var(--p)/.2) !important; 
         --ag-range-selection-highlight-color: var(--s) !important; /* Secondary for cell range handle? */

        /* --- Add these lines for Context Menu --- */
        /* Menu Popup Background & Shadow */
        --ag-menu-background-color: var(--b2) !important;
        --ag-popup-background-color: var(--b2) !important; /* Often used by popups */
        --ag-card-shadow: none !important; /* Remove default shadow if desired, or map to DaisyUI shadow */
        --ag-menu-border: 1px solid var(--b3) !important; /* Add border */

        /* Menu Item Styling */
        --ag-menu-option-active-color: hsla(var(--p)/.3) !important; /* Background on hover/active */
        --ag-list-item-background-color: transparent !important; /* Make items transparent by default */
        --ag-menu-separator-color: var(--b3) !important; /* Separator line color */

        /* Ensure text color is inherited */
        --ag-menu-foreground-color: var(--bc) !important; 
        /* --- End of Context Menu additions --- */

        /* Other potential overrides - add as needed */
        /* --ag-value-change-delta-up-color: var(--su); */
        /* --ag-value-change-delta-down-color: var(--er); */
        /* --ag-chip-background-color: hsla(var(--a)/.2); */ 
      }
    </style>
  </head>
  <body>
    <main class="flex flex-col lg:flex-row gap-4 p-4"> 
      <div class="card bg-base-100 shadow-xl lg:max-w-xs flex-shrink-0" id="controls-card-body">
        <div class="card-body p-4">
          <h2 class="card-title text-lg mb-3">Table Controls</h2>
          <div class="form-control w-full">
            <textarea id="sql-input" class="textarea textarea-bordered textarea-sm w-full" rows="4" placeholder="Enter SQL query here...">SELECT * FROM user</textarea>
            <button id="run-query-button" class="btn btn-sm btn-primary mt-2">Run Query</button>
          </div>

          <div class="divider my-1"></div>

          {/* Fieldset: Table Info */}
          <div class="border border-base-300 rounded-md p-2 mb-2">
            <h3 class="font-semibold text-sm mb-1">Table Info</h3>
            <div class="overflow-x-auto">
              <table class="table table-zebra table-compact w-full">
                <thead>
                  <tr><th>Key</th><th>Value</th></tr>
                </thead>
                <tbody>
                  {[{key: "key", value: "value"}].map(row => <tr><td>{row.key}</td><td>{row.value}</td></tr>)}
                </tbody>
              </table>
            </div>
          </div>

          {/* Fieldset: Element Info */}
           <div class="border border-base-300 rounded-md p-2">
            <h3 class="font-semibold text-sm mb-1">Element Info</h3>
             <div class="overflow-x-auto">
              <table class="table table-zebra table-compact w-full">
                <thead>
                   <tr><th>Key</th><th>Value</th></tr>
                </thead>
                <tbody>
                  {[{key: "key", value: "value"}].map(row => <tr><td>{row.key}</td><td>{row.value}</td></tr>)}
                </tbody>
              </table>
            </div>
          </div>

          {/* Query Result Display Area */}
          <div class="border border-base-300 rounded-md p-2 mt-2">
            <h3 class="font-semibold text-sm mb-1">Last Query Result</h3>
            <div class="overflow-x-auto bg-base-200 rounded p-1">
              <pre id="query-result-display" class="text-xs whitespace-pre-wrap break-all">Awaiting query...</pre>
            </div>
          </div>

        </div>
      </div>

      <div class="divider lg:divider-horizontal"></div>

      <div id="ag-grid-wrapper" class="flex-grow card bg-base-100 shadow-xl">
         <div class="card-body p-4">
            <h2 class="card-title text-lg mb-3">Data Table</h2>
             <div class="min-h-96">
               {/* Pass dummy data and options to the grid component */}
               {/* Ensure theme matches CSS import */}
               {/* Example style */}
               {/* Load and hydrate the component */}
               <AgGridAstro
                 columnDefs={testColDefs}
                 rowData={testRowData}
                 theme="ag-theme-alpine"
                 style="height: 600px; width: 100%;"
               />
             </div>
         </div>
      </div>
    </main>

    <script>
      // Import JSDoc types for hinting
      /**
       * @typedef {import('ag-grid-enterprise').GridApi} GridApi
       * @typedef {import('ag-grid-enterprise').ColDef} ColDef
       * @typedef {import('ag-grid-enterprise').IServerSideDatasource} IServerSideDatasource
       * @typedef {import('ag-grid-enterprise').IServerSideGetRowsParams} IServerSideGetRowsParams
       * @typedef {import('ag-grid-enterprise').LoadSuccessParams} LoadSuccessParams
       */

      const gridWrapper = document.getElementById('ag-grid-wrapper');
      const resultDisplay = document.getElementById('query-result-display');

      /**
       * Holds the AG Grid API instance once the grid is ready.
       * @type {GridApi | null}
       */
      let gridApi = null;

      /** @param {string} query */
      function runQuery(query) {
        console.log(`[runQuery] START - Fetching: ${query}`);
        // Update result display immediately
        if(resultDisplay) resultDisplay.textContent = `Fetching query: ${query}...`;

        fetch("/api/query_mysql", { 
          method: "POST",
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ query: query })
        }).then((resp) => {
          if (!resp.ok) throw new Error(`HTTP error! status: ${resp.status}`);
          return resp.json();
        }).then((data) => {
          console.log(`[runQuery] Fetch successful. Data: `, data);
          // Check the actual response structure from your API
          const responseData = data; // Assuming data IS the object { success: boolean, rows?: any[], error?: string }
          if(resultDisplay) resultDisplay.textContent = JSON.stringify(responseData, null, 2); // Display raw result

          if (!gridApi) {
            console.error(`[runQuery] Grid API not available yet!`);
            return;
          }

          // Use the success flag from the API response
          if (responseData && responseData.success && responseData.rows) {
            console.log(`[runQuery] API reported success. Creating datasource and columns.`);
            const dataSource = createServerSideDatasource(responseData.rows);
            const colDefs = createColDefs(responseData.rows);

            console.log(`[runQuery] Setting serverSideDatasource...`);
            if (gridApi) gridApi.setGridOption("serverSideDatasource", dataSource);
            console.log(`[runQuery] Setting columnDefs...`);
            if (gridApi) gridApi.setGridOption("columnDefs", colDefs);
            console.log(`[runQuery] Grid options set.`);
          } else {
            const errorMsg = responseData?.error || "No rows found or success flag false.";
            console.warn(`[runQuery] API reported failure or no rows: ${errorMsg}`);
            if(resultDisplay) resultDisplay.textContent = `Query failed or returned no data: ${errorMsg}`;
            if (gridApi) gridApi.setGridOption("serverSideDatasource", null);
            if (gridApi) gridApi.setGridOption("columnDefs", []);
          }
        }).catch(error => {
          console.error(`[runQuery] Fetch CATCH block error:`, error);
          if(resultDisplay) resultDisplay.textContent = `Fetch Error: ${error.message}`;
          if (gridApi) {
            gridApi.setGridOption("serverSideDatasource", null);
            gridApi.setGridOption("columnDefs", []);
          }
        });
        console.log(`[runQuery] END - Fetching: ${query}`);
      }

      // Get controls
      const sqlInput = document.getElementById('sql-input') as HTMLTextAreaElement;
      const runQueryButton = document.getElementById('run-query-button');

      // Add button listener
      if (sqlInput && runQueryButton && resultDisplay) {
        runQueryButton.addEventListener('click', () => {
          const query = sqlInput.value.trim();
          if (query) {
            runQuery(query);
          } else {
            resultDisplay.textContent = "Please enter a query.";
          }
        });
      } else {
        console.error('Could not find controls or result display element.');
      }

      // --- Server-Side Data Functions (Moved from AgGridAstro) ---
      /**
       * @param {any[]} data 
       * @returns {IServerSideDatasource}
       */
      function createServerSideDatasource(data) {
        console.log(`[createServerSideDatasource] Creating datasource for data:`, data);
        return {
          /** @param {IServerSideGetRowsParams} params */
          getRows: (params) => {
            console.log(`[Datasource] - rows requested by grid: `, params.request);
            const response = {
              success: true,
              // Ensure using params.request for slicing, not just first N rows
              rows: data.slice(params.request.startRow, params.request.endRow),
              rowCount: data.length
            };
            setTimeout(() => {
              if (response.success) {
                /** @type {LoadSuccessParams} */
                const successParams = { rowData: response.rows, rowCount: response.rowCount };
                console.log(`[Datasource] Calling params.success with:`, successParams);
                params.success(successParams);
              } else {
                console.log(`[Datasource] Calling params.fail()`);
                params.fail();
              }
            }, 200);
          }
        };
      }

      /** 
       * @param {any[]} data 
       * @returns {ColDef[]}
       */
      function createColDefs(data) {
        console.log(`[createColDefs] Creating columns for data:`, data);
        if (!data || data.length === 0) return [];
        return Object.keys(data[0]).map(k => ({ field: k, filter: true, floatingFilter: true }));
      }

      // Listener for agGridReady to get the API instance
      gridWrapper.addEventListener('agGridReady', (event: Event) => {
        console.log('Received agGridReady event');
        
        // Cast event to CustomEvent to access detail
        const customEvent = event as CustomEvent;
        if (customEvent.detail && customEvent.detail.api) {
          gridApi = customEvent.detail.api;
          console.log('Grid API stored. Running initial query.');
          // Run initial query AFTER grid is ready and API is stored
          runQuery("SELECT * FROM user");
        } else if (gridApi) {
          console.warn('agGridReady event received, but API already stored?');
        } else {
          console.error('agGridReady event did not contain expected API details.');
        }
      });
    </script>
  </body>
</html>
