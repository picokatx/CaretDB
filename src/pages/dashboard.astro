---
import Layout from '../components/Layout.astro';
import { getSession } from "auth-astro/server";
import { sqlQueries } from '../lib/sql_query_locale';

// Get the current user session
const session = await getSession(Astro.request);

// If no session exists, redirect to the login page
if (!session) {
  return Astro.redirect('/login');
}

// If session exists, proceed to render the page
const pageTitle = "Dashboard";

const API_URL = `${Astro.url.origin}/api/query_mysql`;

let userCount = 0;
let webstateCount = 0;
let replayCount = 0;
let eventCount = 0;
let fetchCountError: string | null = null;

async function fetchCount(query: string): Promise<number> {
    const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query })
    });
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API Error (${response.status}): ${errorData.error?.message || errorData.error || 'Failed to fetch count'}`);
    }
    const data = await response.json();
    if (data.success && Array.isArray(data.rows) && data.rows.length > 0) {
        return parseInt(data.rows[0].count) || 0;
    } else {
        throw new Error(data.error?.message || data.error || 'Invalid data format for count query');
    }
}

try {
    const countResults = await Promise.allSettled([
        fetchCount(sqlQueries.countUsers),
        fetchCount(sqlQueries.countWebstates),
        fetchCount(sqlQueries.countReplays),
        fetchCount(sqlQueries.countEvents)
    ]);

    if (countResults[0].status === 'fulfilled') userCount = countResults[0].value;
    if (countResults[1].status === 'fulfilled') webstateCount = countResults[1].value;
    if (countResults[2].status === 'fulfilled') replayCount = countResults[2].value;
    if (countResults[3].status === 'fulfilled') eventCount = countResults[3].value;

    const countErrors = countResults.filter(r => r.status === 'rejected') as PromiseRejectedResult[];
    if (countErrors.length > 0) {
        fetchCountError = countErrors.map(e => e.reason?.message || 'Unknown error').join('; ');
        console.error("[Dashboard] Errors fetching database counts:", countErrors.map(e => e.reason));
    }
} catch (error: any) {
    console.error("[Dashboard] Unexpected error fetching database stats:", error);
    fetchCountError = error.message || "Could not load database statistics.";
}

---

<Layout title={pageTitle}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-4">
      Welcome {session?.user?.name || session?.user?.email || "User"}!
    </h1>

    {fetchCountError && <div class="alert alert-warning shadow-lg mb-4"><span>Warning: {fetchCountError}</span></div>}

    <div class="stats shadow w-full mb-8">
        <div class="stat">
            <div class="stat-title">Users</div>
            <div class="stat-value">{userCount.toLocaleString()}</div>
        </div>
        <div class="stat">
            <div class="stat-title">Webstates</div>
            <div class="stat-value">{webstateCount.toLocaleString()}</div>
        </div>
        <div class="stat">
            <div class="stat-title">Replays</div>
            <div class="stat-value">{replayCount.toLocaleString()}</div>
        </div>
        <div class="stat">
            <div class="stat-title">Total Events</div>
            <div class="stat-value">{eventCount.toLocaleString()}</div>
        </div>
    </div>
  </div>
  <div id="toast-container" class="toast toast-end toast-bottom z-50"></div>
</Layout>

<script>
  // Dashboard-specific scripts could go here if needed in the future
</script>