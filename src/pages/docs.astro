---
import Layout from '../components/Layout.astro';

// Sample documentation sections
const docSections = [
  {
    title: "Getting Started",
    content: "Learn how to set up and start using ClickstreamDB for capturing user interactions on your website.",
    icon: "rocket"
  },
  {
    title: "Recording Sessions",
    content: "Understand how session recording works and how to configure it for your needs.",
    icon: "video"
  },
  {
    title: "Replaying & Analyzing",
    content: "Learn how to replay recorded sessions and analyze user behavior data.",
    icon: "chart"
  },
  {
    title: "Console Logs",
    content: "See how to capture and review console logs for debugging user sessions.",
    icon: "terminal"
  },
  {
    title: "API Reference",
    content: "Explore the full API documentation for integrating with your applications.",
    icon: "code"
  }
];
---

<Layout title="ClickstreamDB - Documentation">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8 text-center">Documentation</h1>
    
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Sidebar navigation -->
      <div class="w-full md:w-64 bg-base-200 p-4 rounded-box">
        <h2 class="text-lg font-semibold mb-4">Contents</h2>
        <ul class="menu bg-base-200 w-full rounded-box">
          {docSections.map((section, index) => (
            <li>
              <a href={`#section-${index}`} class="font-medium">
                {getIcon(section.icon)}
                {section.title}
              </a>
            </li>
          ))}
        </ul>
      </div>
      
      <!-- Main content -->
      <div class="flex-1">
        <div class="prose max-w-none">
          <p class="lead">
            Welcome to the ClickstreamDB documentation. Here you'll find comprehensive guides and documentation to help you start working with our user behavior recording and analysis platform as quickly as possible.
          </p>
          
          <div class="my-12 space-y-16">
            {docSections.map((section, index) => (
              <section id={`section-${index}`} class="scroll-mt-24">
                <div class="card bg-base-100 shadow-xl">
                  <div class="card-body">
                    <h2 class="card-title text-2xl flex items-center gap-2">
                      {getIcon(section.icon, "h-6 w-6")}
                      {section.title}
                    </h2>
                    <p>{section.content}</p>
                    
                    <div class="mt-6">
                      <!-- Example content for each section -->
                      {index === 0 && (
                        <div>
                          <h3 class="text-xl font-semibold mb-2">Installation</h3>
                          <pre class="bg-base-300 p-4 rounded-lg overflow-x-auto"><code>npm install @clickstreamdb/client</code></pre>
                          
                          <h3 class="text-xl font-semibold mt-6 mb-2">Basic Setup</h3>
                          <pre class="bg-base-300 p-4 rounded-lg overflow-x-auto"><code>import { ClickstreamRecorder } from '@clickstreamdb/client';

// Initialize the recorder
const recorder = new ClickstreamRecorder({
  apiKey: 'your-api-key',
  captureConsole: true
});

// Start recording
recorder.start();</code></pre>
                        </div>
                      )}
                      
                      {index === 1 && (
                        <div>
                          <h3 class="text-xl font-semibold mb-2">Recording Options</h3>
                          <ul class="list-disc pl-5 space-y-2">
                            <li><strong>captureConsole</strong>: Capture browser console logs</li>
                            <li><strong>captureNetwork</strong>: Record network requests</li>
                            <li><strong>maskInputs</strong>: Automatically mask sensitive form inputs</li>
                            <li><strong>maskText</strong>: Mask all text content on the page</li>
                          </ul>
                        </div>
                      )}
                      
                      {index === 2 && (
                        <div>
                          <h3 class="text-xl font-semibold mb-4">Timeline View</h3>
                          <img src="https://via.placeholder.com/800x400?text=Timeline+View+Screenshot" alt="Timeline View" class="rounded-lg w-full mb-4" />
                          <p class="text-sm text-base-content/70">The timeline view allows you to navigate through session events chronologically.</p>
                        </div>
                      )}
                    </div>
                    
                    <div class="card-actions justify-end mt-4">
                      <a href="#" class="btn btn-primary btn-sm">Learn More</a>
                    </div>
                  </div>
                </div>
              </section>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      if (!targetId) return;
      
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: 'smooth'
        });
      }
    });
  });
</script>

<!-- Helper function to render icons -->
{function getIcon(name: string, className = "w-4 h-4 mr-2") {
  switch (name) {
    case 'rocket':
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"></path><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"></path><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"></path><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"></path></svg>`;
    case 'video':
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m22 8-6 4 6 4V8Z"></path><rect width="14" height="12" x="2" y="6" rx="2" ry="2"></rect></svg>`;
    case 'chart':
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3v18h18"></path><path d="m19 9-5 5-4-4-3 3"></path></svg>`;
    case 'terminal':
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="4 17 10 11 4 5"></polyline><line x1="12" x2="20" y1="19" y2="19"></line></svg>`;
    case 'code':
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>`;
    default:
      return `<svg xmlns="http://www.w3.org/2000/svg" class="${className}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" x2="12" y1="8" y2="16"></line><line x1="8" x2="16" y1="12" y2="12"></line></svg>`;
  }
}} 