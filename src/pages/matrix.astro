---
// Use the new Layout component
import Layout from "../components/Layout.astro";
import ControlPanel from "../components/matrix/ControlPanel.astro";
import RecordingPanel from "../components/matrix/RecordingPanel.astro";
import TimelinePanel from "../components/matrix/TimelinePanel.astro";
import ReplayPanel from "../components/matrix/ReplayPanel.astro";
import { getSession } from "auth-astro/server";
import { sql } from "./../lib/mysql-connect"; // Adjusted path, assuming it's relative from pages
import { UAParser } from 'ua-parser-js';
import "../styles/rrweb-player.css";
const systemName = "ClickstreamDB";

// Get the current user session
const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect('/login');
}

// Check for webstate parameter
const urlParams = new URL(Astro.request.url).searchParams;
const webstateHash = urlParams.get('webstate');

let webstateHashes: { html_hash: string }[] = [];
let fetchError: string | null = null;

// If no specific webstate is selected, fetch all available ones for the selection UI
if (!webstateHash) {
  try {
    const query = 'SELECT html_hash FROM webstate ORDER BY html_hash;'; 
    const [rows, _] = await sql.query(query);
    webstateHashes = rows as { html_hash: string }[]; // Type assertion
  } catch (error: any) {
    console.error("Error fetching webstate hashes:", error);
    fetchError = "Failed to load webstate list from database.";
  }
}

const API_URL = `${Astro.url.origin}/api/generate_preview`;

---

<Layout title={`${systemName} - Record & Replay`}>
  <!-- Inject clientInfo for client-side scripts -->
  <h1 class="text-2xl font-bold mb-4">
    RRWeb Record & Replay 
    {webstateHash ? `( ${webstateHash.substring(0,12)}... )` : '( Select a Webstate )'}
  </h1>

  {webstateHash ? (
    <>
      {/* Display snippet and main panels only if webstateHash exists */}
      <div class="flex flex-col md:flex-row gap-4">
        <RecordingPanel />
        <ReplayPanel />
      </div>
      <ControlPanel />
      <TimelinePanel />
      {/* Add the toast container here */}
      <div id="toast-container" class="toast toast-end toast-bottom z-50"></div>
      <div id="client-info"></div>
    </>
  ) : (
    <>
      {/* Display selection UI only if webstateHash does NOT exist */}
      <div class="p-4 border rounded bg-base-200 mb-4">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-semibold">Select a Webstate to Analyze</h2>
          <button id="generate-previews-btn" class="btn btn-sm btn-secondary">Generate Missing Previews</button>
        </div>
        <div id="preview-generation-status" class="text-xs mb-4 min-h-[2em]"></div>

        {fetchError ? (
          <p class="text-error">{fetchError}</p>
        ) : webstateHashes.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {webstateHashes.map(ws => (
              <a href={`/matrix?webstate=${ws.html_hash}`} class="card card-compact bg-base-100 shadow-xl hover:shadow-2xl transition-shadow duration-300">
                <figure class="bg-neutral h-48 flex items-center justify-center overflow-hidden">
                  <img 
                    src={`/dom/preview/${ws.html_hash}.png`} 
                    alt={`Preview of ${ws.html_hash}`}
                    class="object-contain h-full w-full preview-image"
                    data-hash={ws.html_hash} 
                    onerror="handlePreviewError(this)"
                  />
                </figure>
                <div class="card-body p-3">
                  <p class="text-xs font-mono break-all">{ws.html_hash}</p>
                </div>
              </a>
            ))}
          </div>
        ) : (
          <p class="text-warning">No webstates found in the database.</p>
        )}
      </div>
    </>
  )}
</Layout>

<!-- New inline script to pass data -->
<script define:vars={{ webstateHash, webstateHashes, API_URL }} is:inline>
  window.matrixData = JSON.parse(JSON.stringify({ 
    webstateHash, 
    webstateHashes, 
    API_URL 
  }));
</script>

<!-- Main client-side script, removed define:vars -->
<script>
  import { initRecorder } from "../lib/matrix/recorder";
  import { initTimelineControls } from "../lib/matrix/timeline";

  // Declare the type for the data passed via the inline script
  declare global {
      interface Window {
          matrixData: {
              webstateHash: string | null;
              webstateHashes: { html_hash: string }[];
              API_URL: string;
          } | undefined;
          handlePreviewError: (imgElement: HTMLImageElement | Element) => void;
      }
  }
  
  // Function to handle image loading errors for previews
  function handlePreviewError(imgElement: HTMLImageElement | Element): void { // Add return type void
      if (imgElement instanceof HTMLImageElement) {
          console.log(`[Debug] Preview failed to load for image:`, imgElement.dataset.hash);
          imgElement.onerror = null; // Prevent infinite loops if the placeholder also fails - MOVED INSIDE
      }
      const figure = imgElement.closest('figure');
      if (figure) {
          figure.innerHTML = '<div class="text-neutral-content text-center text-xs p-2">(Preview not generated)</div>';
      }
      imgElement.classList.add('missing'); // Add class for checking later
  }
  // Make function globally accessible for inline handler
  window.handlePreviewError = handlePreviewError;

  // Access variables from the window object - MOVED INSIDE DOMContentLoaded
  // const { webstateHash, webstateHashes, API_URL } = window.matrixData || {};

  document.addEventListener("DOMContentLoaded", () => {
    // Ensure matrixData is available
    if (!window.matrixData) {
        console.error("Matrix data not found on window object.");
        return;
    }
    // Destructure variables inside the event listener
    const { webstateHash, webstateHashes, API_URL } = window.matrixData;

    if (webstateHash) {
      // --- Code for when a webstate IS selected ---
      console.log("Webstate parameter found:", webstateHash);
      const recordFrame = document.getElementById('record-frame'); // Removed type assertion
      const iframeUrlDisplay = document.getElementById('iframe-url-display');
      const htmlUrl = `/dom/${webstateHash}.html`;

      if (recordFrame instanceof HTMLIFrameElement) { // Use instanceof check
        console.log("Setting recording iframe src to:", htmlUrl);
        recordFrame.src = htmlUrl;
      } else {
        console.error("Recording iframe (record-frame) not found or not an iframe!");
      }
      if (iframeUrlDisplay) {
        iframeUrlDisplay.textContent = htmlUrl;
      } else {
        console.warn("Iframe URL display element (iframe-url-display) not found.");
      }
      initTimelineControls();
      initRecorder();
    } else {
      // --- Code for when NO webstate is selected ---
      console.log("No webstate parameter found, setting up preview generation button.");
      const generateBtn = document.getElementById('generate-previews-btn') as HTMLButtonElement | null;
      const statusDiv = document.getElementById('preview-generation-status');
      
      // Ensure elements and required data are present
      if (generateBtn && statusDiv && webstateHashes && typeof API_URL === 'string') { // Check API_URL type explicitly
        generateBtn.addEventListener('click', async () => {
          console.log('[Debug Preview Gen] Generate button clicked.'); // Log click
          (generateBtn as HTMLButtonElement).disabled = true; // Assert type here
          (generateBtn as HTMLButtonElement).classList.add('loading'); // Assert type here
          statusDiv.textContent = `Checking ${webstateHashes.length} webstates for missing previews...`;
          let generatedCount = 0;
          let errorCount = 0;

          // Iterate through all known hashes
          for (const ws of webstateHashes) { // Use webstateHashes from window.matrixData
            const hash = ws.html_hash;
            console.log(`[Debug Preview Gen] Processing hash: ${hash}`); // Log loop iteration
            const imgElement = document.querySelector(`.preview-image[data-hash="${hash}"]`); 
            
            // Check if image needs generation
            let needsGeneration = false;
            if (imgElement && imgElement.classList.contains('missing')) {
                needsGeneration = true;
            }
            else if (imgElement instanceof HTMLImageElement && !(imgElement.complete && imgElement.naturalWidth > 0)) {
                needsGeneration = true;
                if (!imgElement.onerror) {
                  imgElement.onerror = () => handlePreviewError(imgElement);
                }
            }
             else if (!imgElement) {
                 needsGeneration = true;
                 console.warn(`Image element not found for hash ${hash}`);
             }

            if (needsGeneration) {
                console.log(`[Debug Preview Gen] Needs generation for ${hash}. Preparing fetch...`); // Log before fetch
                statusDiv.textContent = `Generating preview for ${hash.substring(0, 12)}...`;
                try {
                    const response = await fetch(API_URL, { // API_URL type checked above
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ html_hash: hash })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) {
                        console.error(`Error generating preview for ${hash}:`, result.error || `Status ${response.status}`);
                        errorCount++;
                    } else {
                        console.log(`Preview request successful for ${hash}:`, result.message);
                        generatedCount++;
                        // If successfully generated, attempt to update the image source
                        if (imgElement instanceof HTMLImageElement && result.message === "Preview generated successfully.") {
                             imgElement.src = `/dom/preview/${hash}.png?t=${Date.now()}`; // Add timestamp to force reload
                             imgElement.classList.remove('missing'); // Ensure missing class is removed
                             // Replace figure content if it was placeholder
                             const figure = imgElement.closest('figure');
                             if(figure && figure.querySelector('.text-neutral-content')) {
                                 figure.innerHTML = ''; // Clear placeholder div
                                 figure.appendChild(imgElement); // Re-add the image
                             }
                             // Remove error handler only after successful load is confirmed (might need onload event)
                             // imgElement.onerror = null; 
                        }
                    }
                } catch (error) {
                    console.error(`Fetch error generating preview for ${hash}:`, error);
                    errorCount++;
                }
            } else {
                console.log(`[Debug Preview Gen] Preview already exists or loaded for ${hash}. Skipping fetch.`); // Log skipping
            }
             // Small delay between requests
             await new Promise(resolve => setTimeout(resolve, 100)); 
          }

          if(statusDiv) statusDiv.textContent = `Finished. Generated: ${generatedCount}, Errors: ${errorCount}. Refresh might be needed to see all previews.`;
          (generateBtn as HTMLButtonElement).disabled = false; // Assert type here
          (generateBtn as HTMLButtonElement).classList.remove('loading'); // Assert type here
        });
      } else {
          console.error("Generate Previews button, status div, webstateHashes, or API_URL not found/valid.");
      }
    }
  });
</script>
