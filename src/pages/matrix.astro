---
// Assuming you have a default layout like this
// Adjust the import path if your layout is elsewhere
import Head from '../components/Head.astro';
import "../styles/app.css";
const systemName = "ClickstreamDB";
---

<html lang="en" data-theme="synthwave">
  <head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="generator" content={Astro.generator} />
    <Head title={`${systemName} - Local Record & Replay`} />
    {/* rrweb CSS still needed for potential replay styling */}
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/rrweb@latest/dist/style.css"
    />
  </head>
  <body class="bg-base-100 text-base-content">
  <main class="p-4">
    <h1 class="text-2xl font-bold mb-4">RRWeb Local Record & Replay (Iframe Managed)</h1>

    <div class="flex flex-col md:flex-row gap-4">
        <!-- Recording Area -->
        <div class="flex-1">
            <h2 class="text-xl font-semibold mb-2">Recording Window (Local Content)</h2>
            <p class="mb-2 text-info bg-base-200 p-2 rounded text-sm">
                Interact with the content below. Recording is managed within the iframe.
            </p>
            <div class="mockup-browser border bg-base-300">
                <div class="mockup-browser-toolbar">
                    <div class="input">/dom/recordable-page.html</div>
                </div>
                <div class="flex justify-center bg-base-200">
                    <iframe id="record-frame" src="/dom/recordable-page.html" width="95%" height="400px" class="border border-neutral my-4"></iframe>
                </div>
            </div>
        </div>

        <!-- Replay Area -->
        <div class="flex-1">
            <h2 class="text-xl font-semibold mb-2">Replay Window</h2>
             <p class="mb-2 text-info bg-base-200 p-2 rounded text-sm">
                Recorded session will replay here after you stop recording.
            </p>
            <div class="mockup-browser border bg-base-300">
                <div class="mockup-browser-toolbar">
                    <div class="input">Replay Area</div>
                </div>
                <div id="replay-container" class="flex justify-center items-center bg-base-200 min-h-[436px]">
                    {/* rrweb Replayer will attach here */}
                </div>
            </div>
        </div>
    </div>

    <!-- Controls -->
    <div class="mt-4 flex items-center gap-4">
      <button id="start-record-btn" class="btn btn-success">Start Recording</button> <!-- Always enabled -->
      <button id="stop-replay-btn" class="btn btn-error" disabled>Stop Recording & Replay</button>
      <p id="status" class="font-semibold">Status: Idle</p>
    </div>

    <script>
      // Import only Replayer for the parent page
      import { Replayer } from 'rrweb';

      // Interface for the iframe window - parent only needs to know the callable functions
      interface IframeWindowWithRecorder extends Window {
        startRecordingInIframe?: () => void;
        stopRecordingInIframe?: () => void;
      }

      document.addEventListener('DOMContentLoaded', () => {
        console.log("Parent DOMContentLoaded fired.");
        const recordFrame = document.getElementById('record-frame') as HTMLIFrameElement | null;
        const replayContainer = document.getElementById('replay-container');
        const startBtn = document.getElementById('start-record-btn') as HTMLButtonElement | null;
        const stopBtn = document.getElementById('stop-replay-btn') as HTMLButtonElement | null;
        const statusEl = document.getElementById('status');

        let rrwebEvents: any[] = [];
        let replayerInstance: Replayer | null = null;
        let isRecording = false;

        if (!recordFrame || !replayContainer || !startBtn || !stopBtn || !statusEl) {
            console.error("Parent: Essential UI elements not found! Cannot initialize.");
            if (statusEl) statusEl.textContent = "Status: Error - UI elements missing";
            return;
        }

        function updateStatus(text: string) {
            if (statusEl) statusEl.textContent = `Status: ${text}`;
        }

        // Listen for messages from the iframe
        window.addEventListener('message', (event) => {
             // IMPORTANT: Check the origin for security in production!
             // if (event.origin !== 'http://localhost:4321') return;

             if (!event.data) return;

             // Handle events sent from iframe
             if (event.data.type === 'rrwebEvent') {
                 if (isRecording && event.data.event) {
                    rrwebEvents.push(event.data.event);
                 }
             }
             // Handle status updates from iframe
             else if (event.data.type === 'statusUpdate') {
                 console.log(`[Parent] Status update from iframe: ${event.data.text}`);
                 updateStatus(event.data.text);
                 // Optional: Still disable buttons on critical iframe error? User request implies maybe not.
                 // if (event.data.text.startsWith('Error:')) {
                 //    startBtn.disabled = true;
                 //    stopBtn.disabled = true;
                 // }
             }
        });

        // --- Parent Button Event Listeners ---

        startBtn.addEventListener('click', () => {
            if (isRecording) {
                console.warn("Parent: Start clicked but already recording.");
                return;
            }
           
            const iframeWin = recordFrame.contentWindow as IframeWindowWithRecorder | null;
           
            if (iframeWin && typeof iframeWin.startRecordingInIframe === 'function') {
                isRecording = true;
                rrwebEvents = [];
                updateStatus('Recording... (in iframe)');
                startBtn.disabled = true;
                stopBtn.disabled = false;
               
                // Clear previous replay
                if (replayerInstance) {
                    replayerInstance.destroy();
                    replayerInstance = null;
                    if (replayContainer) replayContainer.innerHTML = '';
                }

                // Call the function defined INSIDE the iframe
                iframeWin.startRecordingInIframe();
            } else {
                 updateStatus('Error: Cannot call start function in iframe. Is it loaded?');
                 console.error('Parent: Iframe window or startRecordingInIframe function not available.');
                 // Don't disable start button here, let user retry
            }
        });

        stopBtn.addEventListener('click', () => {
            if (!isRecording) return;

             const iframeWin = recordFrame.contentWindow as IframeWindowWithRecorder | null;
            
            // Call stop function inside iframe
            if (iframeWin && typeof iframeWin.stopRecordingInIframe === 'function') {
                iframeWin.stopRecordingInIframe();
            } else {
                console.warn('Parent: Could not call stop function in iframe. Events might be incomplete.');
            }
           
            isRecording = false;
            updateStatus('Recording stopped. Preparing replay...');
            stopBtn.disabled = true;

            if (!replayContainer) {
                 updateStatus('Error: Replay container not found.');
                 startBtn.disabled = false; // Re-enable start button
                 return;
            }

            if (rrwebEvents.length === 0) {
                updateStatus('No events recorded. Start recording again.');
                 if (replayContainer) replayContainer.innerHTML = '<p class="text-center p-4">No events were recorded.</p>';
                 startBtn.disabled = false; // Re-enable start button
                return;
            }

            // Initialize the replayer on the parent page
            try {
                if (replayerInstance) {
                    replayerInstance.destroy();
                }
                 if (replayContainer) replayContainer.innerHTML = '';
               
                replayerInstance = new Replayer(rrwebEvents, {
                    root: replayContainer,
                    skipInactive: true,
                });

                replayerInstance.on('replay-end', () => {
                    updateStatus('Replay finished. Ready to record again.');
                     startBtn.disabled = false; // Re-enable start button
                    // stopBtn remains disabled
                });
                
                replayerInstance.on('resize', () => {});

                updateStatus('Replaying...');
                replayerInstance.play();

            } catch(error) {
                 console.error("Parent: Failed to initialize or start replay:", error);
                 updateStatus('Error during replay setup.');
                 startBtn.disabled = false; // Re-enable start button
                 // stopBtn remains disabled
            }
        });

      });
    </script>
  </main>
</body>
</html>
