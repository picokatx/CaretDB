---
import Layout from '../components/Layout.astro';
import { getSession } from "auth-astro/server";

// Get the current user session
const session = await getSession(Astro.request);

// Define all DaisyUI themes
const themes = [
  "light", "dark", "cupcake", "bumblebee", "emerald", "corporate", 
  "synthwave", "retro", "cyberpunk", "valentine", "halloween", "garden", 
  "forest", "aqua", "lofi", "pastel", "fantasy", "wireframe", "black", 
  "luxury", "dracula", "cmyk", "autumn", "business", "acid", "lemonade", 
  "night", "coffee", "winter", "dim", "nord", "sunset", "default"
];

// Fetch current user's privacy setting
let currentPrivacyMask: boolean = true; // Default to true (safer)
let fetchSettingsError: string | null = null;
let response: any;
let settingsUrl: string;
if (session) { // Only fetch if logged in
  try {
    settingsUrl = `${Astro.url.origin}/api/settings/${session?.user?.email}`;
    response = await fetch(settingsUrl);
    if (response.ok) {
      const data = await response.json();
      currentPrivacyMask = data.privacyMask;
    } else {
      const errorData = await response.json().catch(() => ({ error: "Failed to parse error"}));
      throw new Error(`API Error (${response.status}): ${errorData.error || 'Failed to fetch settings'}`);
    }
  } catch (error: any) {
      console.error("Error fetching user settings:", error);
      fetchSettingsError = error.message || "Could not load preferences.";
      // Keep default currentPrivacyMask = true
  }
}

---

<Layout title="ClickstreamDB - Settings">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Settings</h1>
    
    { fetchSettingsError && <div class="alert alert-warning shadow-lg mb-4"><span>Warning loading preferences: {fetchSettingsError}</span></div> }

    {session ? (
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <!-- Sidebar navigation -->
        <div class="bg-base-200 p-4 rounded-box">
          <h2 class="text-lg font-semibold mb-4">Settings Menu</h2>
          <ul class="menu bg-base-200 w-full rounded-box">
            <li><a href="#profile" class="font-medium">Profile</a></li>
            <li><a href="#preferences" class="font-medium">Preferences</a></li>
          </ul>
        </div>
        
        <!-- Main content -->
        <div class="md:col-span-2">
          <div class="card bg-base-100 shadow-xl mb-8">
            <div class="card-body">
              <h2 class="card-title">User Profile</h2>
              
              <div class="flex items-center gap-4 mb-6">
                <div class="avatar">
                  <div class="w-24 rounded-full">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-full h-full text-base-content/30">
                      <path fill-rule="evenodd" d="M18.685 19.097A9.723 9.723 0 0 0 21.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 0 0 3.065 7.097A9.716 9.716 0 0 0 12 21.75a9.716 9.716 0 0 0 6.685-2.653Zm-12.54-1.285A7.486 7.486 0 0 1 12 15a7.486 7.486 0 0 1 5.855 2.812A8.224 8.224 0 0 1 12 20.25a8.224 8.224 0 0 1-5.855-2.438ZM15.75 9a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
                <div>
                  <h3 class="text-xl font-semibold">{session.user?.name || 'User'}</h3>
                  <p class="text-base-content/70">{session.user?.email || 'user@example.com'}</p>
                </div>
              </div>
              
              <div class="form-control w-full max-w-md mb-4">
                <label class="label">
                  <span class="label-text">Display Name</span>
                </label>
                <input type="text" id="display-name-input" placeholder="Your name" class="input input-bordered w-full" value={session.user?.name || ''} />
              </div>
              
              <div class="card-actions justify-end">
                <button id="save-display-name-btn" class="btn btn-primary hidden">Save Name</button>
                <button id="change-password-btn" type="button" class="btn btn-outline">Change Password</button>
              </div>
            </div>
          </div>

          <!-- Preferences Section -->
          <div id="preferences" class="card bg-base-100 shadow-xl mt-8">
            <div class="card-body">
              <h2 class="card-title">Preferences</h2>
              {/* Privacy Mask Setting */} 
              <div class="form-control">
                <label class="label cursor-pointer justify-start gap-4">
                  <span class="label-text">Mask Text Input Fields</span> 
                  <input 
                    type="checkbox" 
                    class="toggle toggle-primary" 
                    id="privacy-mask-toggle" 
                    checked={currentPrivacyMask} 
                  />
                </label>
                <p class="text-xs text-base-content/60 pl-1">Replaces text entered into input fields during recordings with asterisks (*) in the saved data. Does not affect recording playback if original data was captured before enabling.</p>
              </div>

              <div class="divider my-2"></div>

              <p class="mb-4">Choose your preferred theme:</p>
              
              <div class="dropdown w-full max-w-xs">
                <label tabindex="0" role="button" class="btn btn-outline w-full justify-between" id="theme-dropdown-button">
                  <span id="theme-dropdown-label">Select Theme</span>
                  <svg width="12px" height="12px" class="inline-block h-2 w-2 fill-current opacity-60" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2048 2048"><path d="M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z"></path></svg>
                </label>
                <ul tabindex="0" id="theme-list" class="dropdown-content bg-base-200 rounded-box z-[1] p-2 shadow-lg w-full max-h-96 overflow-y-auto mt-1">
                  {themes.map((theme) => (
                    <li>
                      <input
                        type="radio"
                        name="theme-dropdown-radio"
                        class="theme-controller btn btn-sm btn-block btn-ghost justify-start capitalize my-0.5"
                        aria-label={theme === 'default' ? 'System Default' : theme}
                        value={theme}
                      />
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

        </div>
      </div>
    ) : (
      <div class="card bg-base-100 shadow-xl max-w-md mx-auto">
        <div class="card-body">
          <h2 class="card-title">Please Login</h2>
          <p>You need to be logged in to view and edit your settings.</p>
          <div class="card-actions justify-end">
            <a href="/login" class="btn btn-primary">Go to Login</a>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

{/* --- Password Change Modal --- */} 
<dialog id="password-change-modal" class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg mb-4">Change Password</h3>
    <form id="password-change-form" method="dialog"> {/* Use method="dialog" for default close on Cancel */} 
      <div class="form-control w-full mb-3">
        <label class="label" for="current-password">
          <span class="label-text">Current Password</span>
        </label>
        <input type="password" id="current-password" placeholder="Enter your current password" class="input input-bordered w-full" required />
      </div>
      <div class="form-control w-full mb-3">
        <label class="label" for="new-password">
          <span class="label-text">New Password</span>
        </label>
        <input type="password" id="new-password" placeholder="Enter new password" class="input input-bordered w-full" required minlength="6"/>
      </div>
      <div class="form-control w-full mb-6">
        <label class="label" for="confirm-password">
          <span class="label-text">Confirm New Password</span>
        </label>
        <input type="password" id="confirm-password" placeholder="Confirm new password" class="input input-bordered w-full" required minlength="6"/>
      </div>
      <div class="modal-action">
        <button type="submit" class="btn btn-primary">Submit Change</button>
        <button type="button" id="cancel-password-change-btn" class="btn">Cancel</button> 
      </div>
    </form>
  </div>
  {/* Optional: Click backdrop to close */} 
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>
{/* --- End Password Change Modal --- */} 

<script define:vars={{ session }}>
  window.session = session;
</script>

<script>
    // Declare the type for the data passed via the inline script
    declare global {
      interface Window {
          session: {
              user: {
                  email: string;
                  name: string;
              } | null;
          } | null;
      }
  }
  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    const anchorElement = anchor as HTMLAnchorElement;
    anchorElement.addEventListener('click', (e: Event) => {
      e.preventDefault();
      const targetId = anchorElement.getAttribute('href');
      if (!targetId) return;
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  // --- Theme Selector Logic --- 
  const themeList = document.getElementById('theme-list');
  const themeDropdownLabel = document.getElementById('theme-dropdown-label');
  
  if (themeList) {
    themeList.addEventListener('change', (event) => {
      const target = event.target as HTMLInputElement;
      if (target.name === 'theme-dropdown-radio' && target.value) {
        const theme = target.value; // Get selected theme

        // --- Apply Theme Logic (Inlined) --- 
        const themeToApply = theme === 'default' ? 'synthwave' : theme; 
        document.documentElement.setAttribute('data-theme', themeToApply);
        localStorage.setItem('theme', theme); 
        const labelText = theme === 'default' ? 'System Default' : theme.charAt(0).toUpperCase() + theme.slice(1);
        if (themeDropdownLabel) {
          themeDropdownLabel.textContent = labelText;
        }
        // Note: Checking the radio should happen automatically due to name attribute
        // --- End Apply Theme Logic ---

        // Close dropdown after selection
        if (document.activeElement instanceof HTMLElement) {
            document.activeElement.blur();
        }
      }
    });
  }

  // Privacy Mask Toggle Logic
  const privacyToggle = document.getElementById('privacy-mask-toggle') as HTMLInputElement | null;
  if (privacyToggle) {
    privacyToggle.addEventListener('change', async () => {
      const newValue = privacyToggle.checked;
      console.log('Privacy mask changed to:', newValue);
      
      try {
        
        const response = await fetch(`/api/settings/${window.session?.user?.email}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ privacyMask: newValue })
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Failed to parse error'}));
          throw new Error(`API Error (${response.status}): ${errorData.error || 'Failed to update setting'}`);
        }

        // Optional: Show success toast/message
        console.log('Privacy setting updated successfully.');

      } catch (error: any) {
        console.error('Error updating privacy setting:', error);
        // Optional: Show error toast/message to user
        alert(`Error saving setting: ${error.message}`); // Simple alert for now
        // Revert toggle state on error
        privacyToggle.checked = !newValue;
      }
    });
  }

  // Initialize theme on load
  document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme') || 'default'; // Get saved theme or use 'default'
    // --- Apply Theme Logic (Inlined for Initial Load) --- 
    const theme = savedTheme;
    const themeToApply = theme === 'default' ? 'synthwave' : theme; 
    document.documentElement.setAttribute('data-theme', themeToApply);
    // localStorage.setItem('theme', theme); // Already set or default
    const labelText = theme === 'default' ? 'System Default' : theme.charAt(0).toUpperCase() + theme.slice(1);
    if (themeDropdownLabel) {
      themeDropdownLabel.textContent = labelText;
    }
    // Check the correct radio button for initial load
    const radioToCheck = document.querySelector(`input[name="theme-dropdown-radio"][value="${theme}"]`) as HTMLInputElement;
    if (radioToCheck) {
      radioToCheck.checked = true;
    }
    // --- End Apply Theme Logic ---
  });

  // --- Profile Editing Logic ---
  const displayNameInput = document.getElementById('display-name-input') as HTMLInputElement | null;
  const saveDisplayNameBtn = document.getElementById('save-display-name-btn') as HTMLButtonElement | null;
  let initialDisplayName = displayNameInput?.value; // Store initial value

  // Show/Hide Save button for Display Name
  if (displayNameInput && saveDisplayNameBtn) {
    displayNameInput.addEventListener('input', () => {
      if (displayNameInput.value !== initialDisplayName && displayNameInput.value.trim() !== '') {
        saveDisplayNameBtn.classList.remove('hidden');
      } else {
        saveDisplayNameBtn.classList.add('hidden');
      }
    });

    // Handle Save Display Name click (Requires API endpoint: /api/user/profile)
    saveDisplayNameBtn.addEventListener('click', async () => {
      const newName = displayNameInput.value.trim();
      if (newName === initialDisplayName || newName === '') return; // Don't save if unchanged or empty

      saveDisplayNameBtn.classList.add('loading', 'btn-disabled'); // Show loading state

      try {
        // Call the new API endpoint
        const response = await fetch('/api/user/profile', { 
          method: 'POST', 
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ displayName: newName })
        });
        
        const result = await response.json(); // Always try to parse JSON
        if (!response.ok || !result.success) { 
            throw new Error(result.error || 'Failed to update name'); 
        }

        alert('Display name updated successfully!'); // Replace with better notification

        // Update initial value and hide button on success
        initialDisplayName = newName; 
        saveDisplayNameBtn.classList.add('hidden'); 

      } catch (error) {
        console.error('Error updating display name:', error);
        alert(`Error updating name: ${(error as Error).message}`); // Replace with better notification
      } finally {
         saveDisplayNameBtn.classList.remove('loading', 'btn-disabled'); // Remove loading state
      }
    });
  }

  // --- Password Change Modal Logic ---
  const changePasswordBtn = document.getElementById('change-password-btn');
  const passwordModal = document.getElementById('password-change-modal') as HTMLDialogElement | null;
  const passwordForm = document.getElementById('password-change-form') as HTMLFormElement | null;
  const cancelPasswordBtn = document.getElementById('cancel-password-change-btn');
  const currentPasswordInput = document.getElementById('current-password') as HTMLInputElement | null;
  const newPasswordInput = document.getElementById('new-password') as HTMLInputElement | null;
  const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement | null;

  // Open modal
  changePasswordBtn?.addEventListener('click', () => {
    passwordModal?.showModal();
  });

  // Cancel button closes modal
  cancelPasswordBtn?.addEventListener('click', () => {
    passwordForm?.reset(); // Clear form
    passwordModal?.close();
  });

  // Handle password form submission (Requires API endpoint: /api/user/password)
  passwordForm?.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent default dialog closing if we handle it

    if (!currentPasswordInput || !newPasswordInput || !confirmPasswordInput) return;

    const currentPassword = currentPasswordInput.value;
    const newPassword = newPasswordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    if (newPassword.length < 6) {
        alert('New password must be at least 6 characters long.');
        return;
    }

    if (newPassword !== confirmPassword) {
      alert('New passwords do not match.');
      return; // Don't proceed
    }

    // Optionally add loading state to submit button
    const submitBtn = passwordForm.querySelector('button[type="submit"]') as HTMLButtonElement | null;
    if(submitBtn) submitBtn.classList.add('loading', 'btn-disabled');

    try {
      // TODO: Replace with actual API call to change password
      console.log(`TODO: Call API to change password. Current: ${currentPassword}, New: ${newPassword}`);
      // Example fetch (replace with your actual endpoint and method, likely POST)
      // const response = await fetch('/api/user/password', { 
      //   method: 'POST', 
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ currentPassword, newPassword })
      // });
      // const result = await response.json();
      // if (!response.ok || !result.success) throw new Error(result.error || 'Failed to change password');

      // Simulate success for now
      await new Promise(res => setTimeout(res, 1000)); 
      alert('Password changed successfully! (Simulated)'); // Replace with better notification

      passwordForm.reset(); // Clear form on success
      passwordModal?.close(); // Close modal on success

    } catch (error) {
      console.error('Error changing password:', error);
      alert(`Error changing password: ${(error as Error).message}`); // Replace with better notification
      // Keep modal open on error?
    } finally {
      if(submitBtn) submitBtn.classList.remove('loading', 'btn-disabled'); // Remove loading state
    }
  });

</script> 