---
import { Console } from "console";
import Layout from "../components/Layout.astro";
import Topbar from "../components/Topbar.astro"; // Included via Layout usually, but explicit here for clarity
import { getSession } from "auth-astro/server";

// --- Auth Check ---
const session = await getSession(Astro.request);

// 1. Check if logged in (Basic check, already done in original code, but good practice)
if (!session?.user) {
  // Original code already handles this redirect, but we'll keep the check explicit
  return Astro.redirect("/login?error=Unauthorized"); 
}

// 2. Check if admin
if (session.user.role !== 'admin') {
  return Astro.redirect("/unauthorized?page=Debug Tools"); // Redirect non-admins
}
// --- End Auth Check ---

const pageTitle = "CaretDB - Debug Tools";
const API_URL = `${Astro.url.origin}/api`;
---

<Layout title={pageTitle}>
  <h1 class="text-2xl font-bold mb-4">Debug Tools</h1>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- Card for Database Schema Rebuild -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title">Database Management</h2>
        <p>
          Rebuild the database schema based on the latest `build_schema.sql`
          file. This will drop and recreate all tables.
        </p>
        <div class="form-control mt-4">
          <button id="build-schema-button" class="btn btn-warning"
            >Build/Rebuild Schema</button
          >
        </div>
        <div class="border border-base-300 rounded-md p-2 mt-4">
          <h3 class="font-semibold text-sm mb-1">Schema Build Result</h3>
          <div class="overflow-x-auto bg-base-200 rounded p-1 min-h-16">
            <pre
              id="schema-result-display"
              class="text-xs whitespace-pre-wrap break-all">Awaiting action...</pre>
          </div>
        </div>
      </div>
    </div>

    <!-- Card for SQL Data Export -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title">Export Data</h2>
        <p>
          Download a `.sql` file containing all predefined data found in
          `src/lib/sql_query_locale.ts`.
        </p>
        <div class="form-control mt-4">
          <button id="export-data-button" class="btn btn-secondary">
            Export Predefined Data (.csv)
          </button>
        </div>
        <div class="form-control mt-4">
          <button id="import-data-button" class="btn btn-secondary">
            Import Predefined Data (.csv)
          </button>
        </div>
        <div class="border border-base-300 rounded-md p-2 mt-4">
          <h3 class="font-semibold text-sm mb-1">Export Result</h3>
          <div class="overflow-x-auto bg-base-200 rounded p-1 min-h-16">
            <pre
              id="export-result-display"
              class="text-xs whitespace-pre-wrap break-all">Awaiting action...</pre>
          </div>
        </div>
      </div>
    </div>

    <!-- Card for Session Display -->
    <div class="card bg-base-100 shadow-xl md:col-span-2"> <!-- Spans full width on medium screens -->
      <div class="card-body">
        <h2 class="card-title">Current Session Object</h2>
        <div class="overflow-x-auto bg-base-200 rounded p-2">
          <pre class="text-xs whitespace-pre-wrap break-all">
            {JSON.stringify(session, null, 2)}
          </pre>
        </div>
      </div>
    </div>

  </div>
</Layout>

<script define:vars={{ API_URL }} is:inline>
  // Now `API_URL` is available here as a plain JS variable:
  window.API_URL = API_URL;
</script>

<script>
  // Get controls and displays
  const buildSchemaButton = document.getElementById("build-schema-button");
  const schemaResultDisplay = document.getElementById("schema-result-display");
  const exportQueriesButton = document.getElementById("export-data-button");
  const importQueriesButton = document.getElementById("import-data-button");
  const exportResultDisplay = document.getElementById("export-result-display");
  // const sentryButton = document.getElementById('sentry-debug-button'); // Placeholder
  // const sentryResultDisplay = document.getElementById('sentry-result-display'); // Placeholder

  // Function to trigger browser download
  /*function downloadFile(filename, content, mimeType = "text/plain") {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }*/

  declare global {
      interface Window {
          API_URL: string;
      }
  }

  // Add listener for Build Schema button
  if (buildSchemaButton && schemaResultDisplay) {
    buildSchemaButton.addEventListener("click", () => {
      console.log(
        "[buildSchema - Debug Page] Button clicked. Sending request to /api/build_schema"
      );
      schemaResultDisplay.textContent = "Initiating schema build...";
      buildSchemaButton.setAttribute("disabled", "true"); // Disable button during request

      fetch("/api/build_schema", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      })
        .then(async (resp) => {
          const data = await resp.json();
          if (!resp.ok) {
            throw new Error(data.error || `HTTP error! status: ${resp.status}`);
          }
          return data;
        })
        .then((data) => {
          console.log("[buildSchema - Debug Page] Fetch successful:", data);
          schemaResultDisplay.textContent = `Schema Build Successful: ${data.message || JSON.stringify(data)}`;
        })
        .catch((error) => {
          console.error("[buildSchema - Debug Page] Fetch error:", error);
          schemaResultDisplay.textContent = `Schema Build Failed: ${error.message}`;
        })
        .finally(() => {
          buildSchemaButton.removeAttribute("disabled"); // Re-enable button
        });
    });
  } else {
    console.error(
      "Could not find build-schema-button or schema-result-display element on debug page."
    );
  }

  async function downloadCSV(apiUrl: string, param: string){
    const response = await fetch(apiUrl + '/export_csv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: param })
    });
    if (!response.ok) throw new Error(`Export failed (${response.status})`);
  }

  async function exportSQL(apiUrl: string): Promise<string[]>{
    const response = await fetch(apiUrl + '/query_mysql', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: "SHOW TABLES;" })
    });
    if (!response.ok) throw new Error(`Export failed (${response.status})`);
    const data = await response.json();

    for(const i of data.rows){
      await downloadCSV(apiUrl,i.Tables_in_caretdb)
    }

    return data.rows;
  }

  async function importSQL(apiUrl: string){
    const response = await fetch(apiUrl + '/upload_csv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    if (!response.ok) throw new Error(`Import failed (${response.status})`);
  }

  // Add listener for Export Queries button
  if (exportQueriesButton && exportResultDisplay) {
    exportQueriesButton.addEventListener("click", () => {
      console.log("[exportQueries - Debug Page] Button clicked. Sending request to /api/query_mysql");
      exportResultDisplay.textContent = "Initiating export...";
      exportQueriesButton.setAttribute("disabled", "true");

      const apiUrl = window.API_URL;

      console.log("testing")
      const tablelist = exportSQL(apiUrl);
      console.log(tablelist);
    });
  }
  if(importQueriesButton){
    importQueriesButton.addEventListener("click", () => {
      console.log("import step 1")
      //console.log("[exportQueries - Debug Page] Button clicked. Sending request to /api/query_mysql");
      importQueriesButton.setAttribute("disabled", "true");

      const apiUrl = window.API_URL;

      console.log("testing")
      importSQL(apiUrl);
    });
  }

  // TODO: Add event listener logic for sentry-debug-button once available
</script>
